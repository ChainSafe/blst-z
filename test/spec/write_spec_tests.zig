const std = @import("std");
const spec_test_options = @import("spec_test_options");

pub fn main() !void {
    const allocator = std.heap.page_allocator;

    const out = try std.fs.cwd().createFile("test/spec/spec_tests.zig", .{});
    defer out.close();

    var writer = out.writer().any();

    try writer.writeAll(
        \\// This file is generated by write_spec_tests.zig.
        \\// Do not commit changes by hand.
        \\
        \\const std = @import("std");
        \\const spec_test_options = @import("spec_test_options");
        \\const test_case = @import("test_case.zig");
        \\
        \\const bls_tests_dir_name = "general/tests/general";
        \\const allocator = std.testing.allocator;
        \\
        \\
    );

    // BLS tests are only present for these forks
    const bls_test_forks = &[_][]const u8{
        "phase0",
        "altair",
    };

    const bls_tests_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
        spec_test_options.spec_test_out_dir,
        spec_test_options.spec_test_version,
        "general",
        "tests",
        "general",
    });
    defer allocator.free(bls_tests_dir_name);

    for (bls_test_forks) |fork_name| {
        const fork_tests_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
            bls_tests_dir_name,
            fork_name,
            "bls",
        });
        defer allocator.free(fork_tests_dir_name);

        const fork_tests_dir = try std.fs.cwd().openDir(fork_tests_dir_name, .{ .iterate = true });
        var fork_tests_dir_it = fork_tests_dir.iterate();
        while (try fork_tests_dir_it.next()) |fork_test_entry| {
            switch (fork_test_entry.kind) {
                .directory => {},
                else => {
                    continue;
                },
            }

            const test_type = fork_test_entry.name;
            const test_type_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
                fork_tests_dir_name,
                test_type,
                "bls",
            });
            defer allocator.free(test_type_dir_name);

            const test_type_dir = try std.fs.cwd().openDir(test_type_dir_name, .{ .iterate = true });
            var test_type_dir_it = test_type_dir.iterate();
            while (try test_type_dir_it.next()) |test_type_entry| {
                switch (test_type_entry.kind) {
                    .directory => {},
                    else => {
                        continue;
                    },
                }
                const test_name = test_type_entry.name;
                const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{
                    test_type_dir_name,
                    test_name,
                });
                defer allocator.free(test_dir_name);
                try writeTest(writer, fork_name, test_type, test_name);
            }
        }
    }
}

/// Assumes the following global decls
/// - std, allocator, spec_test_options, bls_tests_dir_name, test_case, {tests_dir}
fn writeTest(
    writer: std.io.AnyWriter,
    fork_name: []const u8,
    test_type: []const u8,
    test_name: []const u8,
) !void {
    try writer.print(
        \\test "{s} - {s} - {s}" {{
        \\    const test_dir_name = try std.fs.path.join(allocator, &[_][]const u8{{
        \\        spec_test_options.spec_test_out_dir,
        \\        spec_test_options.spec_test_version,
        \\        bls_tests_dir_name,
        \\        "{s}/bls/{s}/bls/{s}",
        \\    }});
        \\    defer allocator.free(test_dir_name);
        \\
        \\    const test_dir = try std.fs.cwd().openDir(test_dir_name, .{{}});
        \\    try test_case.{s}(allocator, test_dir);
        \\}}
        \\
        \\
    ,
        .{
            fork_name,
            test_type,
            test_name,
            fork_name,
            test_type,
            test_name,
            test_type,
        },
    );
}
