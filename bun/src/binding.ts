
// This file is auto-generated by @chainsafe/bun-ffi-z. Do not edit.

import path from "node:path";
import { openLibrary } from "@chainsafe/bun-ffi-z";

const fns = {
  "secretKeySizeOf": {
    "args": [],
    "returns": "u32"
  },
  "secretKeySerializeSize": {
    "args": [],
    "returns": "u32"
  },
  "secretKeyFromBytes": {
    "args": [
      "ptr",
      "ptr",
      "u32"
    ],
    "returns": "u32"
  },
  "secretKeyToBytes": {
    "args": [
      "ptr",
      "ptr"
    ],
    "returns": "void"
  },
  "secretKeyKeyGen": {
    "args": [
      "ptr",
      "ptr",
      "u32"
    ],
    "returns": "u32"
  },
  "secretKeyKeyGenV3": {
    "args": [
      "ptr",
      "ptr",
      "u32"
    ],
    "returns": "u32"
  },
  "secretKeyKeyGenV45": {
    "args": [
      "ptr",
      "ptr",
      "u32",
      "ptr",
      "u32"
    ],
    "returns": "u32"
  },
  "secretKeyDeriveMasterEip2333": {
    "args": [
      "ptr",
      "ptr",
      "u32"
    ],
    "returns": "u32"
  },
  "secretKeyDeriveChildEip2333": {
    "args": [
      "ptr",
      "ptr",
      "u32"
    ],
    "returns": "u32"
  },
  "secretKeyToPublicKey": {
    "args": [
      "ptr",
      "ptr"
    ],
    "returns": "void"
  },
  "secretKeySign": {
    "args": [
      "ptr",
      "ptr",
      "ptr",
      "u32"
    ],
    "returns": "u32"
  },
  "publicKeySizeOf": {
    "args": [],
    "returns": "u32"
  },
  "publicKeyCompressSize": {
    "args": [],
    "returns": "u32"
  },
  "publicKeyFromBytes": {
    "args": [
      "ptr",
      "ptr",
      "u32"
    ],
    "returns": "u32"
  },
  "publicKeyToBytes": {
    "args": [
      "ptr",
      "ptr"
    ],
    "returns": "void"
  },
  "publicKeyIsEqual": {
    "args": [
      "ptr",
      "ptr"
    ],
    "returns": "bool"
  },
  "publicKeyValidate": {
    "args": [
      "ptr"
    ],
    "returns": "u32"
  },
  "publicKeyFromAggregate": {
    "args": [
      "ptr",
      "ptr"
    ],
    "returns": "void"
  },
  "publicKeyToAggregate": {
    "args": [
      "ptr",
      "ptr"
    ],
    "returns": "void"
  },
  "publicKeyAggregateWithRandomness": {
    "args": [
      "ptr",
      "ptr",
      "u32",
      "bool"
    ],
    "returns": "u32"
  },
  "publicKeyAggregate": {
    "args": [
      "ptr",
      "ptr",
      "u32",
      "bool"
    ],
    "returns": "u32"
  },
  "aggregatePublicKeySizeOf": {
    "args": [],
    "returns": "u32"
  },
  "aggregatePublicKeys": {
    "args": [
      "ptr",
      "ptr",
      "u32",
      "bool"
    ],
    "returns": "u32"
  },
  "aggregatePublicKeyWithRandomness": {
    "args": [
      "ptr",
      "ptr",
      "ptr",
      "u32",
      "bool"
    ],
    "returns": "u32"
  },
  "aggregatePublicKeyAddAggregate": {
    "args": [
      "ptr",
      "ptr"
    ],
    "returns": "void"
  },
  "aggregatePublicKeyAddPublicKey": {
    "args": [
      "ptr",
      "ptr",
      "bool"
    ],
    "returns": "u32"
  },
  "signatureSizeOf": {
    "args": [],
    "returns": "u32"
  },
  "signatureCompressSize": {
    "args": [],
    "returns": "u32"
  },
  "signatureFromBytes": {
    "args": [
      "ptr",
      "ptr",
      "u32"
    ],
    "returns": "u32"
  },
  "signatureToBytes": {
    "args": [
      "ptr",
      "ptr"
    ],
    "returns": "void"
  },
  "signatureValidate": {
    "args": [
      "ptr",
      "bool"
    ],
    "returns": "u32"
  },
  "signatureGroupCheck": {
    "args": [
      "ptr"
    ],
    "returns": "bool"
  },
  "signatureToAggregate": {
    "args": [
      "ptr",
      "ptr"
    ],
    "returns": "void"
  },
  "signatureFromAggregate": {
    "args": [
      "ptr",
      "ptr"
    ],
    "returns": "void"
  },
  "signatureVerify": {
    "args": [
      "ptr",
      "bool",
      "ptr",
      "u32",
      "ptr",
      "bool"
    ],
    "returns": "u32"
  },
  "signatureAggregateVerify": {
    "args": [
      "ptr",
      "bool",
      "ptr",
      "ptr",
      "u32",
      "bool"
    ],
    "returns": "u32"
  },
  "signatureFastAggregateVerify": {
    "args": [
      "ptr",
      "bool",
      "ptr",
      "ptr",
      "u32"
    ],
    "returns": "u32"
  },
  "signatureVerifyMultipleAggregateSignatures": {
    "args": [
      "u32",
      "ptr",
      "ptr",
      "bool",
      "ptr",
      "bool"
    ],
    "returns": "u32"
  },
  "signatureAggregateWithRandomness": {
    "args": [
      "ptr",
      "ptr",
      "u32",
      "bool"
    ],
    "returns": "u32"
  },
  "signatureAggregate": {
    "args": [
      "ptr",
      "ptr",
      "u32",
      "bool"
    ],
    "returns": "u32"
  },
  "aggregateSignatureSizeOf": {
    "args": [],
    "returns": "u32"
  },
  "aggregateSignatureAggregate": {
    "args": [
      "ptr",
      "ptr",
      "u32",
      "bool"
    ],
    "returns": "u32"
  },
  "aggregateSignatureAggregateWithRandomness": {
    "args": [
      "ptr",
      "ptr",
      "u32",
      "bool"
    ],
    "returns": "u32"
  },
  "aggregateSignatureAddAggregate": {
    "args": [
      "ptr",
      "ptr"
    ],
    "returns": "u32"
  },
  "aggregateSignatureAddSignature": {
    "args": [
      "ptr",
      "ptr"
    ],
    "returns": "u32"
  }
} as const;
const lib = await openLibrary(path.join(import.meta.dirname, ".."), fns);

export const binding = lib.symbols;
export const close = lib.close;

